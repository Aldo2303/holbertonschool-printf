.TH _PRINTF "Holberton School, Uruguay" "1" "Cohort #20"

.SH NAME
_printf \- formatted output conversion.

.SH SYNOPSIS
.B #include "main.h"
.B int _printf (\fIconst char *format\fR, ...);

.SH DESCRIPTION
Prints formatted text to the standard output stream, taking as inputs constant *format and a variadic list.

.B Format of the format string

The format string is a character string, composed of zero or more directives: ordinary characters (not %) and conversion specifications. The first ones are simply printed to stdo, and the second ones results fetching zero or more subsequent arguments. Each conversion specification is introduced by the character '%', and ends with a conversion specifier.

.B CONVERSION SPECIFIERS
A character that specifies the type of conversion to be applied. The conversion specifiers and their meanings are:
.BR c
	Prints a character in stdo.

.BR s
	Prints a string in stdo.

.BR d ", " i
	Both print an integer in stdo.

.SH RETURN VALUE
	Upon successful return, this function return the number of characters printed (excluding the null byte used to end output to strings).

	If an output error is encountered, a negative value (-1) is returned.

.SH EXAMPLES
This code:

#include "main.h"
/**
 * main - Entry point
 *
 * Return: Always 0
 */
int main(void)
{
	int len;
	len = _printf("Let's try to printf a simple sentence.\n");
	_printf("Length:[%d, %i]\n", len, len);
	_printf("Negative:[%d, %i]\n", -762534, -762534);
	_printf("Character:[%c]\n", 'H');
	_printf("String:[%s]\n", "I am a string !");
	len = _printf("Percent:[%%]\n");
	_printf("Len:[%d]\n", len);
	_printf("Unknown:[%r]\n");
	return (0);
}

will print:

Let's try to printf a simple sentence.
Length:[39, 39]
Negative:[-762534, -762534]
Character:[H]
String:[I am a string !]
Percent:[%]
Len:[12]
Unknown:[%r]

.SH AUTHORS
Written by Llugdar, Luisina and SÃ¡nchez, Aldo for Holberton School Uruguay, Cohort #20.
